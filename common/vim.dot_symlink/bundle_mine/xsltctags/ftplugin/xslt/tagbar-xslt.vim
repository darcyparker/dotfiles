if executable('xsltctags')
  let g:tagbar_type_xslt = {
  \ 'ctagstype' : 'xslt',
  \ 'ctagsbin'  : 'xsltctags',
  \ 'ctagsargs' : '-f - -p xsltproc',
  \ 'sort' : 0,
  \ 'kinds'     : [
    \ 'S:Stylesheet:0:1',
    \ 'r:Result Documents:0:1',
    \ 'd:Saxon Doctypes:0:1',
    \ 'i:Includes:0:1',
    \ 'o:Imports:0:1',
    \ 'p:Parameters:0:1',
    \ 'v:Variables:0:1',
    \ 'x:Saxon Assigns:0:1',
    \ 'k:Keys:0:1',
    \ 't:Attribute Sets:0:1',
    \ 'h:Character Maps:0:1',
    \ 's:Name Spaces:0:1',
    \ 'e:Elements:0:1',
    \ 'b:Attributes:0:1',
    \ 'n:Named Templates:0:1',
    \ 'm:Matched Templates:0:1',
    \ 'f:Functions:0:1',
    \ 'a:Applied Templates:0:1',
    \ 'j:Applied Imports:0:1',
    \ 'c:Called Templates:0:1',
    \ 'l:Saxon Called Templates:0:1',
    \ 'g:Processing Instructions:0:1'
  \ ],
  \ 'sro': '////',
  \ 'kind2scope' : {
    \ 'S' : 'stylesheet',
    \ 'r' : 'resultDocument',
    \ 'd' : 'saxonDocType',
    \ 'i' : 'include',
    \ 'o' : 'import',
    \ 'p' : 'parameter',
    \ 'v' : 'variable',
    \ 'x' : 'saxonAssign',
    \ 'k' : 'key',
    \ 't' : 'attributeSet',
    \ 'h' : 'characterMap',
    \ 's' : 'nameSpace',
    \ 'e' : 'element',
    \ 'b' : 'attribute',
    \ 'n' : 'namedTemplate',
    \ 'm' : 'matchedTemplate',
    \ 'f' : 'function',
    \ 'a' : 'appliedTemplate',
    \ 'j' : 'appliedImport',
    \ 'c' : 'calledTemplate',
    \ 'l' : 'saxonCalledTemplate',
    \ 'g' : 'processingInstruction'
  \ },
  \ 'scope2kind' : {
    \ 'stylesheet' : 'S',
    \ 'resultDocument' : 'r',
    \ 'saxonDocType' : 'd',
    \ 'include' : 'i',
    \ 'import' : 'o',
    \ 'parameter' : 'p',
    \ 'variable' : 'v',
    \ 'saxonAssign' : 'x',
    \ 'key' : 'k',
    \ 'attributeSet' : 't',
    \ 'characterMap' : 'h',
    \ 'nameSpace' : 's',
    \ 'element' : 'e',
    \ 'attribute' : 'b',
    \ 'namedTemplate' : 'n',
    \ 'matchedTemplate' : 'm',
    \ 'function' : 'f',
    \ 'appliedTemplate' : 'a',
    \ 'appliedImport' : 'j',
    \ 'calledTemplate' : 'c',
    \ 'saxonCalledTemplate' : 'l',
    \ 'processingInstruction' : 'g'
  \}
  \}
endif