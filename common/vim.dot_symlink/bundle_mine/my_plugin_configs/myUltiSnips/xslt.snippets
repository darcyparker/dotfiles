extends xml

snippet apply-templates "xsl:appy-templates" b
<xsl:apply-templates select="${1:*}"/>${2}
endsnippet

snippet mode "mode" i
mode="${1}"
endsnippet

snippet sort "xsl:sort" b
<xsl:sort select="${1:node}" order="${2:ascending}"/>${3}
endsnippet

snippet attribute "xsl:attribute" b
<xsl:attribute name="${1:name}" select="${2}"/>${3}
endsnippet

snippet attribute-long "xsl:attribute long" b
<xsl:attribute name="${1:name}">
	${2}
</xsl:attribute>${3}
endsnippet

snippet attribute-set "xsl:attribute-set" b
<xsl:attribute-set name="${1:name}" use-attribute-sets="${2:list}">
	<xsl:attribute name="${3}" select="${4}"/>
	${5}
</xsl:attribute-set>${6}
endsnippet

snippet character-map "xsl:character-map" b
<xsl:character-map name="${1:name}">
	<xsl:output-character character="&#${2};" string="${3}"/>
	${4}
</xsl:character-map>${5}
endsnippet

snippet output-character "xsl:output-character" b
<xsl:output-character character="&#${1};" string="${2}"/>${3}
endsnippet

snippet key "xsl:key" b
<xsl:key name="${1:name}" match="${2}" use="${3}"/>${4}
endsnippet

snippet call-template "xsl:call-template" b
<xsl:call-template name="${1:template}"/>${2}
endsnippet

snippet call-template-long "xsl:call-template long" b
<xsl:call-template name="${1:template}">
	${2}
</xsl:call-template>${3}
endsnippet

snippet with-param "xsl:with-param" b
<xsl:with-param name="${1:name}" select="${2:*}"/>${3}
endsnippet

snippet with-param-long "xsl:with-param long" b
<xsl:with-param name="${1:name}">
	${2}
</xsl:with-param>${3}
endsnippet

snippet choose "xsl:choose" b
<xsl:choose>
	<xsl:when test="${1:value}">
		${2}
	</xsl:when>
	${3}
</xsl:choose>${4}
endsnippet

snippet when "xsl:when" b
<xsl:when test="${1:test}">
	${2}
</xsl:when>${3}
endsnippet

snippet otherwise "xsl:otherwise" b
<xsl:otherwise>
	${1}
</xsl:otherwise>${2}
endsnippet

snippet copy "xsl:copy" b
<xsl:copy>
	${1}
</xsl:copy>${2}
endsnippet

snippet copy-of "xsl:copy-of" b
<xsl:copy-of select="${1:*}"/>${2}
endsnippet

snippet for-each "xsl:for-each" b
<xsl:for-each select="${1:*}">
	${2}
</xsl:for-each>${3}
endsnippet

snippet for-each-group "xsl-for-each-group" b
<xsl:for-each-group select="${1:*}" group-by="${2}">
	${3}
</xsl:for-each-group>${4}
endsnippet

snippet if "xsl:if" b
<xsl:if test="${1:test}">
	${2}
</xsl:if>${3}
endsnippet

snippet import "xsl:import" b
<xsl:import href="${1:stylesheet}"/>${2}
endsnippet

snippet include "xsl:include" b
<xsl:include href="${1:stylesheet}"/>${2}
endsnippet

snippet param "xsl:param" b
<xsl:param name="${1:name}" select="${2}"/>${3}
endsnippet

snippet output "xsl:output" b
<xsl:output
	method="xml"
	version="1.0"
	encoding="UTF-8"
	indent="yes"
	doctype-public=""
	doctype-system=""
/>${1}
endsnippet

snippet stylesheet "xsl:stylesheet" b
<xsl:stylesheet
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:exsl="http://exslt.org/common"
	xmlns:str="http://exslt.org/strings"
	xmlns:set="http://exslt.org/sets"
	xmlns:date="http://exslt.org/dates-and-times"
	xmlns:dyn="http://exslt.org/dynamic"
	xmlns:math="http://exslt.org/math"
	xmlns:func="http://exslt.org/functions"
	xmlns:saxon="http://saxon.sf.net/"
	xmlns:dtd="http://saxon.sf.net/dtd"
	xmlns:saxonlibxslt="http://icl.com/saxon"
	xmlns:functx="http://www.functx.com"
	xmlns:fxsl="http://fxsl.sf.net/"
	xmlns:xhtml="http://www.w3.org/1999/xhtml"
	xmlns:mathml="http://www.w3.org/1998/Math/MathML"
	xmlns:svg="http://www.w3.org/2000/svg"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	exclude-result-prefixes="xs exsl str set date dyn math func saxon dtd saxonlibxslt functx fxsl mathml svg xlink"
	version="2.0">${1}

</xsl:stylesheet>
endsnippet

snippet identity "identity transform" b
<!--Identity Transform-->
<xsl:template match="@*|node()">
	<xsl:copy>
		<xsl:apply-templates select="@*|node()"/>
	</xsl:copy>
</xsl:template>${1}
endsnippet

snippet identity2 "identity transform XSLT2" b
<!--Identity Transform-->
<xsl:template match="element()">
	<xsl:copy>
	<xsl:apply-templates select="@*,node()"/>
</xsl:copy>
</xsl:template>
<xsl:template match="attribute()|text()|comment()|processing-instruction()">
	<xsl:copy/>
</xsl:template>
<!--*** End of Identity Transform-->${1}
endsnippet

snippet template-match "xsl:template match" b
<xsl:template match="${1:*}"${2}>
	${3}
</xsl:template>${4}
endsnippet

snippet template-name "xsl:template name" b
<xsl:template name="${1:name}"${2}>
	${3}
</xsl:template>${4}
endsnippet

snippet text "xsl:text" i
<xsl:text>${1}</xsl:text>${2}
endsnippet

snippet value-of "xsl:value-of" i
<xsl:value-of select="${1:*}"/>${2}
endsnippet

snippet valueof "xsl:value-of" i
<xsl:value-of select="${1:*}"/>${2}
endsnippet

snippet variable "xsl:variable" b
<xsl:variable name="${1:name}" select="${2:*}"/>${2}
endsnippet

snippet variable-long "xsl:variable long" b
<xsl:variable name="${1:name}">
	${2}
</xsl:variable>${3}
endsnippet

snippet message "xsl:message" i
<xsl:message terminate="${1:yes}">${2}</xsl:message>${3}
endsnippet

snippet comment "xsl:comment" i
<xsl:comment select="${1}"/>${2}
endsnippet

snippet processing-instruction "xsl:processing-instruction" i
<xsl:processing-instruction name="${1}" select="${2}"/>${3}
endsnippet

snippet comment-long "xsl:comment long" i
<xsl:comment>${1}</xsl:comment>${2}
endsnippet

snippet decimal-format "xsl:decimal-format" i
<xsl:decimal-format name="${1:name}"
	decimal-separator="${2}"
	grouping-separator="${3}"
	infinity="${4}"
	minus-sign="${5}"
	NaN="${6}"
	percent="${7}"
	per-mille="${8}"
	zero-digit="${9}"
	digit="${10}"
	pattern-separator="${11}"
/>${12}
endsnippet

snippet document "xsl:document" b
<xsl:document>
	${1}
</xsl:document>${2}
endsnippet

snippet result-document "xsl:result-document" b
<xsl:result-document
	href="${1}"
	method="xml"
	version="1.0"
	encoding="UTF-8"
	indent="yes"
	doctype-public=""
	doctype-system=""
>
	${2}
</xsl:result-document>${3}
endsnippet

snippet element "xsl:element" b
<xsl:element name="${1}">
	${2}
</xsl:element>${3}
endsnippet

snippet sequence "xsl:sequence" i
<xsl:sequence select="${1:*}"/>${2}
endsnippet

snippet fallback "xsl:fallback" b
<xsl:fallback>
	${1}
</xsl:fallback>${2}
endsnippet

snippet function "xsl:function" b
<xsl:function name="${1:name}">
	<xsl:param name="${2}"/>
	${3}
	<xsl:sequence select="${4}"/>
</xsl:function>${5}
endsnippet

snippet function1 "func:function" b
<func:function name="${1:name}">
	<xsl:param name="${2}" />
	${3}
</func:function>${4}
endsnippet

snippet namespace "xsl:namespace" b
<xsl:namespace name="${1:name}" select="${2}"/>${3}
endsnippet

snippet namespace-alias "xsl:namespace-alias" b
<xsl:namespace-alias stylesheet-prefix="${1}" result-prefix="${2}"/>${3}
endsnippet

snippet next-match "xsl:next-match" i
<xsl:next-match/>${1}
endsnippet

snippet next-match-long "xsl:next-match long" b
<xsl:next-match>
	${1}
</xsl:next-match>${2}
endsnippet

snippet specialvars "special variables" b
<xsl:variable name="DoubleQuote" select="'&#34;'"/>
<xsl:variable name="SingleQuote" select='"&#39;"'/>
<xsl:variable name="CurlyLeftBracket" select="'&#123;'"/>
<xsl:variable name="CurlyRightBracket" select="'&#125;'"/>
<xsl:variable name="whitespace" select="'&#x20;&#xa;&#xd;&#x09;'"/> <!--space,line feed,carriage return,tab-->
<xsl:variable name="EMPTY" select="/.."/>  <!--The empty node-set-->
${1}
endsnippet
