#!/bin/bash
so() { [ -s $1 ] && source $1; }

# Identify env with uname, make it lower case, only take first part before _
# ENV_NAME is used to call appropriate bash options for the environment. (ie darwin, cygwin, etc...)
# uname -o option doesn't work on Darwin
export ENV_NAME=$(uname -s | tr 'A-Z' 'a-z')
#export ENV_NAME=$(uname -s | tr 'A-Z' 'a-z' | awk 'BEGIN {FS="_"};{print $1}')

#Load Env specific bash stuff first
#  This is particularly important for cygwin because settings like
#  `export CYGWIN="..."` needs to be set before some stuff like nodejs commands
#  will give an error message

so ~/.bash/bash_${ENV_NAME} # Env specific bash stuff
so ~/.bash/bash_common # Common bash stuff
so ~/.bash/bash_prompt
# If interactive shell, source git-prompt.sh
#[[ $- == *i* ]]   &&   so ~/.bash/git-prompt.sh

# Call useful bash snippets
#so ~/.bash/pathed_cd
# so ~/.bash/saveMYIP

# Move (or Add) /usr/local/bin to the front of the path
[ -d /usr/local/bin ] && export PATH=$(echo /usr/local/bin:$PATH | sed -e "s;:/usr/local/bin;;")

# Move (or Add) npm's bin folder to the front of the path
# Note, $NPMPREFIXBIN is already set by bash_cygwin because I use win32 node and npm
[[ -z $NPMPREFIXBIN ]] && NPMPREFIXBIN=`npm config get prefix`/bin
[ -d $NPMPREFIXBIN ] && export PATH=$(echo $NPMPREFIXBIN:$PATH | sed -e "s;:$NPMPREFIXBIN;;")
unset NPMPREFIXBIN

# if there is a bin folder in home, add it to PATH
[ -d ~/bin ] && export PATH=~/bin:$PATH

#Source/evaluate bash completion
#[[ `which npm` ]] && eval "$(npm completion -)"
#grunt and bower bash completion must be added after updating $PATH
[[ `which grunt 2> /dev/null` ]] && eval "$(grunt --completion=bash)"
[[ `which bower 2> /dev/null` ]] && eval "$(bower completion)"
