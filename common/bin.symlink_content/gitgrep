#!/usr/bin/env bash
#git grep for the repo and its submodules
#works recursively
#by darcyparker@gmail.com
f(){
  pushd . > /dev/null
  local _searchString="$1"; shift
  if [[ $# -ge 1 ]] && [ -d "$1" ]; then
    cd "$1"; shift
  fi
  if [ -d .git ] || git rev-parse --git-dir > /dev/null 2>&1; then
    local _rootDir="$(git rev-parse --show-toplevel)"
  else
    popd > /dev/null
    return
  fi
  local _args=( "git" "grep" "-n" "--no-color" )
  #Add optional extra args
  if [[ $# -ge 1 ]] && [ ! -z "$1" ]; then
    _args=( "${_args[@]}" "$1[@]" )
  fi
  _args=( "${_args[@]}" "$_searchString" -- )

  cd "$_rootDir"
  #Two sets of results: 1) from the git repo and 2) each git submodule
  {
    "${_args[@]}" "$_rootDir"

    git --no-pager submodule --quiet foreach --recursive "echo \"\$toplevel/\$path\"" | \
      while read _subModuleDir; do
        cd "$_subModuleDir"
        "${_args[@]}" "$_subModuleDir" | while read _line; do
        #Output filepath relative to $_rootDir
        echo "${_subModuleDir#$_rootDir/}/$_line"
      done
    done
  } | \
    #Now pipe it to a formatter that includes path, line and column numbers and matched line
  while read _line; do
    local _filePathAndLineNum=$(echo "$_line" | cut -d: -f1,2)
    local _matched=${_line/$_filePathAndLineNum:/''}
    local _columnNum=$(echo "$_matched" | awk "{print index(\$0, \"$_searchString\")}")
    echo "$_filePathAndLineNum:$_columnNum:$_matched"
  done
  popd > /dev/null
}
f "$@"
