#xslt snippets
#Author: Darcy Parker

# Reused from xml.snippets
snippet xml
	<?xml version="1.0" encoding="UTF-8"?>

snippet style
	<xsl:stylesheet
		xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
		xmlns:xs="http://www.w3.org/2001/XMLSchema"
		exclude-result-prefixes="xs"
		version="2.0">
		${1}
	</xsl:stylesheet>
#
snippet output
	<xsl:output
		method="xml"
		version="1.0"
		encoding="UTF-8"
		doctype-public=""
		doctype-system=""
		indent="yes"
		/>
	${1}
#
snippet include
	<xsl:include href="${1}"/>
snippet import
	<xsl:import href="${1}"/>
snippet param
	<xsl:param name="${1}" select="${2}" as="${3}"/>
snippet key
	<xsl:key name="${1}" match="${2}" use="${3}"/>
snippet variable
	<xsl:variable name="${1}" select="${2}"/>
snippet variablel
	<xsl:variable name="${1}">
		${2}
	</xsl:variable>${2}
#
#performsort
snippet performsort
	<xsl:perform-sort select="${1}">
		<xsl:sort data-type="${2}"/>
	</xsl:perform-sort>
#
#Result Document
snippet resultdocument
	<xsl:result-document 
		href="${1}"
		doctype-public="${2}"
		doctype-system="${3}"
		method="${4}">
		${5}
	</xsl:result-document>
#
#misc Nodes
snippet text
	<xsl:text>${1}</xsl:text>
snippet newline
	&#xa;
snippet comment
	<xsl:comment>${1}</xsl:comment>
snippet processinstruction
	<xsl:processing-instruction name="{$1}">${2}</xsl:processing-instruction>
#
#message
snippet message
	<xsl:message>${1}</xsl:message>
snippet messageterminate
	<xsl:message terminate="yes">${1}</xsl:message>
#
# valueof, copyof, copy
snippet valueof
	<xsl:value-of select="${1}"/>
snippet copyof
	<xsl:copy-of select="${1}"/>
snippet copy
	<xsl:copy select="${1}"/>
snippet copyl
	<xsl:copy>
		${1}
	</xsl:copy>
snippet sequence
	<xsl:sequence select="${1}"/>
#
# Conditionals
snippet if
	<xsl:if test="${1}">
		${2}
	</xsl:if>
snippet choose
	<xsl:choose>
		${1}
	</xsl:choose>
snippet when
	<xsl:when test="${1}">
		${2}
	</xsl:when>
snippet otherwise
	<xsl:otherwise>
		${1}
	</xsl:otherwise>
#
#for-each, sort, for-each-group
snippet foreach
	<xsl:for-each select="${1}">
		${2}
	</xsl:for-each>
snippet foreachgroup
	<xsl:for-each-group select="${1}" group-by="${2}">
		${3}
	</xsl:for-each-group>
snippet sort
	<xsl:sort select="${1}" order="${2:ascending}"/>
#
#elements and attributes
snippet element
	<xsl:element name="${1}">
		${2}
	</xsl:element>
snippet element
	<xsl:attribute name="${1}" select="${2}"/>
snippet attributel
	<xsl:attribute name="${1}">
		${2}
	</xsl:attribute>
#
#Templates and functions
snippet template
	<xsl:template match="${1}">
		${2}
	</xsl:template>
snippet namedtemplate
	<xsl:template name="${1}">
		${2}
	</xsl:template>
snippet function
	<xsl:function name="${1}" as="${2}">
		<xsl:param name="${3}" as="${4}"/>
		<!--Return function result as an xsl:sequence-->
		<xsl:sequence select="$5"/>
	</xsl:function>
snippet analyzestring
	<xsl:analyze-string select="${1}" regex="${2}">
		<xsl:matching-substring>
			${3}
		</xsl:matching-substring>
		<xsl:non-matching-substring>
			${4}
		</xsl:non-matching-substring>
	</xsl:analyze-string>
#
#Apply or Call Templates
snippet applytemp
	<xsl:apply-templates select="${1}"/>
snippet applywithparam
	<xsl:apply-templates select="${1}">
		<xsl:with-param name="${2}" select="${3}"/>
		${4}
	</xsl:apply-templates>
snippet calltemp
	<xsl:call-template name="${1}">
		<xsl:with-param name="${2}" select="${3}"/>
		${4}
	</xsl:call-template>
snippet withparam
	<xsl:with-param name="${1}" select="${2}"/>
#
# identity transform (best version for XSLT 2.0
snippet identity
	<!--Identity Transform-->
	<xsl:template match="element()">
		<xsl:copy>
		<xsl:apply-templates select="@*,node()"/>
	</xsl:copy>
	</xsl:template>
	<xsl:template match="attribute()|text()|comment()|processing-instruction()">
		<xsl:copy/>
	</xsl:template>
	<!--*** End of Identity Transform-->
	${1}
#
# the standard identity transform
snippet identity2
	<!--Identity Transform-->
	<xsl:template match="@*|node()">
		<xsl:copy>
			<xsl:apply-templates select="@*|node()"/>
		</xsl:copy>
	</xsl:template>
	<!--*** End of Identity Transform-->
	${1}
